Іовов Микита Павлович
Лабораторна Робота №6
Масиви
Хід роботи 
1.  Створив нову папку lab06
2.  Перемістив потрібні файли для роботи в папку lab06 після чого отримали таку структуру директорій:

└── lab06
 ├── Makefile 
├── README.md 
├── doc 
 │        └── lab06.txt
 └── src 
          └── main.c





3.  Зайшов до файлу main.c і почав роботу;

Вихідний код програми знаходиться у файлі main.c. Точка входу в програму - це функція int main(). Ця функція є основною точкою входу в програму, яка виконує всі необхідні обчислення та операції.

4.  Змінна text представляє масив, в якому ми хочемо підрахувати кількість слів.
5.  Змінна result ініціалізована значенням 0. Вона буде використовуватися для збереження кількості слів.
6.   Змінна isWord ініціалізована значенням 0 і використовується як флаг, щоб вказати, чи розпочалось слово.
7.   Програма використовує цикл for, щоб пройтися по кожному символу у рядку text до тих пір, поки не зустріне символ завершення рядка '\0'.
8. У цьому циклі перевіряється, чи поточний символ не є пробілом, табуляцією або символом нового рядка. Якщо це так, і флаг isWord не встановлений, то значення result збільшується на 1 і встановлюється флаг isWord в 1. Це означає, що ми починаємо нове слово.

9. Якщо поточний символ є пробілом, табуляцією або символом нового рядка, флаг isWord скидається в 0, означаючи, що слово закінчилось.
10. В кінці програми повертається 0.
11. Ввели команду gcc main.c -o myProgram. Після чого створився файл myProgram;
12. Скомпілював код за допомогою команди make all:

rm -rf dist
mkdir dist
clang  -std=gnu11 -g -Wall -Wextra -Werror -Wformat-security -Wfloat-equal -Wshadow -Wconversion -Wlogical-not-parentheses -Wnull-dereference -Wno-unused-variable -Wno-implicit-int-float-conversion -Werror=vla  src/main.c -o ./dist/main.bin
clang-format --verbose -dry-run --Werror src/*
Formatting src/MyProg
Stack dump:
0. Program arguments: clang-format --verbose -dry-run --Werror src/MyProg src/a.out src/main.c 
/lib/x86_64-linux-gnu/libLLVM-10.so.1(_ZN4llvm3sys15PrintStackTraceERNS_11raw_ostreamE+0x1f)[0x7f2c51f734ff]
/lib/x86_64-linux-gnu/libLLVM-10.so.1(_ZN4llvm3sys17RunSignalHandlersEv+0x50)[0x7f2c51f717b0]
/lib/x86_64-linux-gnu/libLLVM-10.so.1(+0x981ac5)[0x7f2c51f73ac5]
/lib/x86_64-linux-gnu/libpthread.so.0(+0x14420)[0x7f2c58742420]
/lib/x86_64-linux-gnu/libLLVM-10.so.1(_ZNK4llvm9SourceMgr10GetMessageENS_5SMLocENS0_8DiagKindERKNS_5TwineENS_8ArrayRefINS_7SMRangeEEENS6_INS_7SMFixItEEE+0xe5)[0x7f2c51f17795]
clang-format[0x40916d]
clang-format[0x406b64]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf3)[0x7f2c510d6083]
clang-format[0x40652e]
Segmentation fault (core dumped)
make: *** [Makefile:15: check] Error 139


13.Перевіримо роботу коду за допомогою lldb:

lldb main.bin
(lldb) target create "main.bin"
Current executable set to '/home/osboxes/Untitled Folder/programming-Iovov_/lab06/dist/main.bin' (x86_64).
(lldb) breakpoint set --file main.c --line 23
Breakpoint 1: where = main.bin`main + 233 at main.c:23:3, address = 0x00000000004011f9
(lldb) r
Process 3538 launched: '/home/osboxes/Untitled Folder/programming-Iovov_/lab06/dist/main.bin' (x86_64)
Process 3538 stopped
* thread #1, name = 'main.bin', stop reason = breakpoint 1.1
    frame #0: 0x00000000004011f9 main.bin`main at main.c:23:3
   20       }
   21     }
   22   
-> 23     return 0;
   24   }
(lldb) p result
(int) $0 = 2

Як бачимо код знаходить правильну кількість слів у тексті, за умови, що між словами може бути будь-яка кількість пропусків.


 



Код програми:

int main() {
  char text[] = "Hello world  "; //Масив для збереження тексту
  
  int result = 0; //Змінна для зберігання кількості слів 
  int isWord = 0; // Флаг, який вказує, чи розпочалось слово

for (int i = 0; text[i] != '\0'; i++) {  //Перевірка   кожного символа рядка до завершення рядка
//Перевірка на пробіли, табуляції та символом нового рядка, а також  на знак оклику, питання
    if (text[i] != ' ' && text[i] != '\t' && text[i] != '\n' && text[i] != '!' && text[i] != '?') {
      if (!isWord) {
        result++;
        isWord = 1;
      }
    } else {  //Якщо поточний символ дорівнює пробілу, табуляції або символу рядка, то слово закінчилось 
      isWord = 0;
    }
  }

  

  return 0;
}
